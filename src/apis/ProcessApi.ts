/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    EmailRequest,
    EmailRequestFromJSON,
    EmailRequestToJSON,
    EmailResponse,
    EmailResponseFromJSON,
    EmailResponseToJSON,
    IdentifyRequest,
    IdentifyRequestFromJSON,
    IdentifyRequestToJSON,
    IdentifyResponse,
    IdentifyResponseFromJSON,
    IdentifyResponseToJSON,
    OrganizationNameRequest,
    OrganizationNameRequestFromJSON,
    OrganizationNameRequestToJSON,
    OrganizationNameResponse,
    OrganizationNameResponseFromJSON,
    OrganizationNameResponseToJSON,
    PersonNameRequest,
    PersonNameRequestFromJSON,
    PersonNameRequestToJSON,
    PersonNameResponse,
    PersonNameResponseFromJSON,
    PersonNameResponseToJSON,
    PhoneRequest,
    PhoneRequestFromJSON,
    PhoneRequestToJSON,
    PhoneResponse,
    PhoneResponseFromJSON,
    PhoneResponseToJSON,
} from '../models';

export interface EmailPostRequest {
    emailRequest: EmailRequest;
}

export interface IdentifyPostRequest {
    identifyRequest: IdentifyRequest;
}

export interface OrganizationNamePostRequest {
    organizationNameRequest: OrganizationNameRequest;
}

export interface PersonNamePostRequest {
    personNameRequest: PersonNameRequest;
}

export interface PhonePostRequest {
    phoneRequest: PhoneRequest;
}

/**
 * no description
 */
export class ProcessApi extends runtime.BaseAPI {

    /**
     * Processes email addresses. Use the service to increase deliverability. Features of the service include: * Validates syntax and parses emails into discrete parts. * Corrects common misspellings and obfuscations made to make email addresses non-discoverable online. * Identifies disposable email addresses. * Identifies generic/non-personal email addresses. 
     * Process email addresses
     */
    async emailPostRaw(requestParameters: EmailPostRequest): Promise<runtime.ApiResponse<EmailResponse>> {
        if (requestParameters.emailRequest === null || requestParameters.emailRequest === undefined) {
            throw new runtime.RequiredError('emailRequest','Required parameter requestParameters.emailRequest was null or undefined when calling emailPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oAuth2ClientCredentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/email`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: EmailRequestToJSON(requestParameters.emailRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => EmailResponseFromJSON(jsonValue));
    }

    /**
     * Processes email addresses. Use the service to increase deliverability. Features of the service include: * Validates syntax and parses emails into discrete parts. * Corrects common misspellings and obfuscations made to make email addresses non-discoverable online. * Identifies disposable email addresses. * Identifies generic/non-personal email addresses. 
     * Process email addresses
     */
    async emailPost(requestParameters: EmailPostRequest): Promise<EmailResponse> {
        const response = await this.emailPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Analyzes unstructured text in order to identify contact data embedded within signatures, sentences, greetings. Features of the service include: * Resolve person names. * Resolve organization names. 
     * Process text to identify contact data.
     */
    async identifyPostRaw(requestParameters: IdentifyPostRequest): Promise<runtime.ApiResponse<IdentifyResponse>> {
        if (requestParameters.identifyRequest === null || requestParameters.identifyRequest === undefined) {
            throw new runtime.RequiredError('identifyRequest','Required parameter requestParameters.identifyRequest was null or undefined when calling identifyPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oAuth2ClientCredentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/identify`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: IdentifyRequestToJSON(requestParameters.identifyRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => IdentifyResponseFromJSON(jsonValue));
    }

    /**
     * Analyzes unstructured text in order to identify contact data embedded within signatures, sentences, greetings. Features of the service include: * Resolve person names. * Resolve organization names. 
     * Process text to identify contact data.
     */
    async identifyPost(requestParameters: IdentifyPostRequest): Promise<IdentifyResponse> {
        const response = await this.identifyPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Processes organization names and provides understanding and correction to how the entity is addressed. Features of the service include: * Identification of company legal types such as \'Corp\', \'Ltd\' and \'GmbH\' 
     * Process organization names
     */
    async organizationNamePostRaw(requestParameters: OrganizationNamePostRequest): Promise<runtime.ApiResponse<OrganizationNameResponse>> {
        if (requestParameters.organizationNameRequest === null || requestParameters.organizationNameRequest === undefined) {
            throw new runtime.RequiredError('organizationNameRequest','Required parameter requestParameters.organizationNameRequest was null or undefined when calling organizationNamePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oAuth2ClientCredentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/organization_name`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: OrganizationNameRequestToJSON(requestParameters.organizationNameRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => OrganizationNameResponseFromJSON(jsonValue));
    }

    /**
     * Processes organization names and provides understanding and correction to how the entity is addressed. Features of the service include: * Identification of company legal types such as \'Corp\', \'Ltd\' and \'GmbH\' 
     * Process organization names
     */
    async organizationNamePost(requestParameters: OrganizationNamePostRequest): Promise<OrganizationNameResponse> {
        const response = await this.organizationNamePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Processes person names and provides understanding and correction to how people are addressed. Features of the service include: * Parsing into discrete name parts like given name, middle name, family name etc. * Removal of non-name elements like salutations or titles. * Capitalization of name parts. * Identification and suggestion of possible nicknames. 
     * Process person names
     */
    async personNamePostRaw(requestParameters: PersonNamePostRequest): Promise<runtime.ApiResponse<PersonNameResponse>> {
        if (requestParameters.personNameRequest === null || requestParameters.personNameRequest === undefined) {
            throw new runtime.RequiredError('personNameRequest','Required parameter requestParameters.personNameRequest was null or undefined when calling personNamePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oAuth2ClientCredentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/person_name`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PersonNameRequestToJSON(requestParameters.personNameRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PersonNameResponseFromJSON(jsonValue));
    }

    /**
     * Processes person names and provides understanding and correction to how people are addressed. Features of the service include: * Parsing into discrete name parts like given name, middle name, family name etc. * Removal of non-name elements like salutations or titles. * Capitalization of name parts. * Identification and suggestion of possible nicknames. 
     * Process person names
     */
    async personNamePost(requestParameters: PersonNamePostRequest): Promise<PersonNameResponse> {
        const response = await this.personNamePostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Processes phone number. Use the service to increase callability. Features of the service include: * Validates syntax and provides uniform formatting of phone numbers to increase understandability. * Parses phone numbers internationally, with support for vanity numbers, extension numbers and more. * Uses phone number ranges from International Telecommunications Union (ITU) to validate whether a phone number is possible or not. 
     * Process phone numbers
     */
    async phonePostRaw(requestParameters: PhonePostRequest): Promise<runtime.ApiResponse<PhoneResponse>> {
        if (requestParameters.phoneRequest === null || requestParameters.phoneRequest === undefined) {
            throw new runtime.RequiredError('phoneRequest','Required parameter requestParameters.phoneRequest was null or undefined when calling phonePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oAuth2ClientCredentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/phone`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: PhoneRequestToJSON(requestParameters.phoneRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => PhoneResponseFromJSON(jsonValue));
    }

    /**
     * Processes phone number. Use the service to increase callability. Features of the service include: * Validates syntax and provides uniform formatting of phone numbers to increase understandability. * Parses phone numbers internationally, with support for vanity numbers, extension numbers and more. * Uses phone number ranges from International Telecommunications Union (ITU) to validate whether a phone number is possible or not. 
     * Process phone numbers
     */
    async phonePost(requestParameters: PhonePostRequest): Promise<PhoneResponse> {
        const response = await this.phonePostRaw(requestParameters);
        return await response.value();
    }

}
