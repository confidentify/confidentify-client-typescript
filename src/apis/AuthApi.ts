/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import {
    AuthRequest,
    AuthRequestFromJSON,
    AuthRequestToJSON,
    AuthResponse,
    AuthResponseFromJSON,
    AuthResponseToJSON,
    AuthorizationCodeRequest,
    AuthorizationCodeRequestFromJSON,
    AuthorizationCodeRequestToJSON,
    AuthorizationCodeResponse,
    AuthorizationCodeResponseFromJSON,
    AuthorizationCodeResponseToJSON,
} from '../models';

export interface AuthPostRequest {
    authRequest: AuthRequest;
}

export interface AuthorizationCodePostRequest {
    authorizationCodeRequest: AuthorizationCodeRequest;
}

/**
 * no description
 */
export class AuthApi extends runtime.BaseAPI {

    /**
     * Consuming username/password or other credential types, this endpoint issues access tokens to be provided for the `Authorization` header of other endpoints. Access tokens are valid for 5 minutes. 
     * Authenticate credentials and retrieve an access token.
     */
    async authPostRaw(requestParameters: AuthPostRequest): Promise<runtime.ApiResponse<AuthResponse>> {
        if (requestParameters.authRequest === null || requestParameters.authRequest === undefined) {
            throw new runtime.RequiredError('authRequest','Required parameter requestParameters.authRequest was null or undefined when calling authPost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oAuth2ClientCredentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/auth`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthRequestToJSON(requestParameters.authRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthResponseFromJSON(jsonValue));
    }

    /**
     * Consuming username/password or other credential types, this endpoint issues access tokens to be provided for the `Authorization` header of other endpoints. Access tokens are valid for 5 minutes. 
     * Authenticate credentials and retrieve an access token.
     */
    async authPost(requestParameters: AuthPostRequest): Promise<AuthResponse> {
        const response = await this.authPostRaw(requestParameters);
        return await response.value();
    }

    /**
     * Given an authenticated user and OAuth2 `client_id`, `redirect_uri` and `state`, this endpoint generates a authorization code that can be sent to the OAuth counterpart and be validated as it is returned in subsequent oauth token requests. 
     * Retrieve authorization code to use as part of OAuth2 flow
     */
    async authorizationCodePostRaw(requestParameters: AuthorizationCodePostRequest): Promise<runtime.ApiResponse<AuthorizationCodeResponse>> {
        if (requestParameters.authorizationCodeRequest === null || requestParameters.authorizationCodeRequest === undefined) {
            throw new runtime.RequiredError('authorizationCodeRequest','Required parameter requestParameters.authorizationCodeRequest was null or undefined when calling authorizationCodePost.');
        }

        const queryParameters: runtime.HTTPQuery = {};

        const headerParameters: runtime.HTTPHeaders = {};

        headerParameters['Content-Type'] = 'application/json';

        if (this.configuration && this.configuration.accessToken) {
            const token = this.configuration.accessToken;
            const tokenString = typeof token === 'function' ? token("bearerAuth", []) : token;

            if (tokenString) {
                headerParameters["Authorization"] = `Bearer ${tokenString}`;
            }
        }
        if (this.configuration && this.configuration.accessToken) {
            // oauth required
            if (typeof this.configuration.accessToken === 'function') {
                headerParameters["Authorization"] = this.configuration.accessToken("oAuth2ClientCredentials", []);
            } else {
                headerParameters["Authorization"] = this.configuration.accessToken;
            }
        }

        const response = await this.request({
            path: `/auth/authorization_code`,
            method: 'POST',
            headers: headerParameters,
            query: queryParameters,
            body: AuthorizationCodeRequestToJSON(requestParameters.authorizationCodeRequest),
        });

        return new runtime.JSONApiResponse(response, (jsonValue) => AuthorizationCodeResponseFromJSON(jsonValue));
    }

    /**
     * Given an authenticated user and OAuth2 `client_id`, `redirect_uri` and `state`, this endpoint generates a authorization code that can be sent to the OAuth counterpart and be validated as it is returned in subsequent oauth token requests. 
     * Retrieve authorization code to use as part of OAuth2 flow
     */
    async authorizationCodePost(requestParameters: AuthorizationCodePostRequest): Promise<AuthorizationCodeResponse> {
        const response = await this.authorizationCodePostRaw(requestParameters);
        return await response.value();
    }

}
