/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    ProcessorOutcome,
    ProcessorOutcomeFromJSON,
    ProcessorOutcomeFromJSONTyped,
    ProcessorOutcomeToJSON,
} from './';

/**
 * 
 * @export
 * @interface EmailResponseRecord
 */
export interface EmailResponseRecord {
    /**
     * 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    id?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    emailFormatted?: string;
    /**
     * Simplified variant of the email address. This format strips out characters or parts of the email that may be technically  irrelevant depending on the email domain\'s addressing rules.  We do not recommend using the simplified email address for sending, but it may be beneficial for certain cases such as identifying duplicates. 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    emailSimplified?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    label?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    subdomain?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    domain?: string;
    /**
     * 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    tld?: string;
    /**
     * When available, a suggested corrected email address. 
     * @type {string}
     * @memberof EmailResponseRecord
     */
    emailSuggested?: string;
    /**
     * 
     * @type {ProcessorOutcome}
     * @memberof EmailResponseRecord
     */
    outcome?: ProcessorOutcome;
}

export function EmailResponseRecordFromJSON(json: any): EmailResponseRecord {
    return EmailResponseRecordFromJSONTyped(json, false);
}

export function EmailResponseRecordFromJSONTyped(json: any, ignoreDiscriminator: boolean): EmailResponseRecord {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'emailFormatted': !exists(json, 'email_formatted') ? undefined : json['email_formatted'],
        'emailSimplified': !exists(json, 'email_simplified') ? undefined : json['email_simplified'],
        'username': !exists(json, 'username') ? undefined : json['username'],
        'label': !exists(json, 'label') ? undefined : json['label'],
        'subdomain': !exists(json, 'subdomain') ? undefined : json['subdomain'],
        'domain': !exists(json, 'domain') ? undefined : json['domain'],
        'tld': !exists(json, 'tld') ? undefined : json['tld'],
        'emailSuggested': !exists(json, 'email_suggested') ? undefined : json['email_suggested'],
        'outcome': !exists(json, 'outcome') ? undefined : ProcessorOutcomeFromJSON(json['outcome']),
    };
}

export function EmailResponseRecordToJSON(value?: EmailResponseRecord | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'email_formatted': value.emailFormatted,
        'email_simplified': value.emailSimplified,
        'username': value.username,
        'label': value.label,
        'subdomain': value.subdomain,
        'domain': value.domain,
        'tld': value.tld,
        'email_suggested': value.emailSuggested,
        'outcome': ProcessorOutcomeToJSON(value.outcome),
    };
}


