/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface RecordsUploadRequest
 */
export interface RecordsUploadRequest {
    /**
     * Defines a string which identifies the source of the records. 
     * @type {string}
     * @memberof RecordsUploadRequest
     */
    recordSource?: string;
    /**
     * The records to upload, each represented as an object with keys matching the properties defined in the dataset\'s `schema`.  Properties defined in the `schema` can be omitted which will correspond to `null` values. Records cannot contain other properties than those defined in the `schema`. 
     * @type {Array<object>}
     * @memberof RecordsUploadRequest
     */
    records?: Array<object>;
}

export function RecordsUploadRequestFromJSON(json: any): RecordsUploadRequest {
    return RecordsUploadRequestFromJSONTyped(json, false);
}

export function RecordsUploadRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): RecordsUploadRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'recordSource': !exists(json, 'record_source') ? undefined : json['record_source'],
        'records': !exists(json, 'records') ? undefined : json['records'],
    };
}

export function RecordsUploadRequestToJSON(value?: RecordsUploadRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'record_source': value.recordSource,
        'records': value.records,
    };
}


