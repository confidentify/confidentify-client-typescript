/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IdentifyResponseRecordEntity
 */
export interface IdentifyResponseRecordEntity {
    /**
     * 
     * @type {string}
     * @memberof IdentifyResponseRecordEntity
     */
    entityType?: IdentifyResponseRecordEntityEntityTypeEnum;
    /**
     * The text string that was identified to represent the entity
     * @type {string}
     * @memberof IdentifyResponseRecordEntity
     */
    text?: string;
}

export function IdentifyResponseRecordEntityFromJSON(json: any): IdentifyResponseRecordEntity {
    return IdentifyResponseRecordEntityFromJSONTyped(json, false);
}

export function IdentifyResponseRecordEntityFromJSONTyped(json: any, ignoreDiscriminator: boolean): IdentifyResponseRecordEntity {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'entityType': !exists(json, 'entity_type') ? undefined : json['entity_type'],
        'text': !exists(json, 'text') ? undefined : json['text'],
    };
}

export function IdentifyResponseRecordEntityToJSON(value?: IdentifyResponseRecordEntity | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'entity_type': value.entityType,
        'text': value.text,
    };
}

/**
* @export
* @enum {string}
*/
export enum IdentifyResponseRecordEntityEntityTypeEnum {
    PersonName = 'person_name',
    OrganizationName = 'organization_name'
}


