/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.2.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import {
    DedupJobBase,
    DedupJobBaseFromJSON,
    DedupJobBaseFromJSONTyped,
    DedupJobBaseToJSON,
    MatchJobAllAllOf,
    MatchJobAllAllOfFromJSON,
    MatchJobAllAllOfFromJSONTyped,
    MatchJobAllAllOfToJSON,
    MatchJobBaseResults,
    MatchJobBaseResultsFromJSON,
    MatchJobBaseResultsFromJSONTyped,
    MatchJobBaseResultsToJSON,
    MatchJobProgress,
    MatchJobProgressFromJSON,
    MatchJobProgressFromJSONTyped,
    MatchJobProgressToJSON,
} from './';

/**
 * 
 * @export
 * @interface DedupJobAll
 */
export interface DedupJobAll {
    /**
     * A unique ID for the deduplication job 
     * @type {string}
     * @memberof DedupJobAll
     */
    id?: string;
    /**
     * An optional name for the job 
     * @type {string}
     * @memberof DedupJobAll
     */
    name?: string;
    /**
     * The ID of the dataset that the deduplication job is targeting.
     * @type {string}
     * @memberof DedupJobAll
     */
    datasetId?: string;
    /**
     * Determines if the job is currently running.
     * @type {boolean}
     * @memberof DedupJobAll
     */
    running?: boolean;
    /**
     * The date and time of job creation.
     * @type {Date}
     * @memberof DedupJobAll
     */
    createdAt?: Date;
    /**
     * 
     * @type {MatchJobBaseResults}
     * @memberof DedupJobAll
     */
    results?: MatchJobBaseResults;
    /**
     * The username of the user who created the job
     * @type {string}
     * @memberof DedupJobAll
     */
    createdBy?: string;
    /**
     * The date and time of job starting.
     * @type {Date}
     * @memberof DedupJobAll
     */
    startedAt?: Date;
    /**
     * The date and time of job finishing.
     * @type {Date}
     * @memberof DedupJobAll
     */
    finishedAt?: Date;
    /**
     * A description of the latest known job state.
     * @type {string}
     * @memberof DedupJobAll
     */
    phase?: string;
    /**
     * 
     * @type {MatchJobProgress}
     * @memberof DedupJobAll
     */
    progress?: MatchJobProgress;
}

export function DedupJobAllFromJSON(json: any): DedupJobAll {
    return DedupJobAllFromJSONTyped(json, false);
}

export function DedupJobAllFromJSONTyped(json: any, ignoreDiscriminator: boolean): DedupJobAll {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'id': !exists(json, 'id') ? undefined : json['id'],
        'name': !exists(json, 'name') ? undefined : json['name'],
        'datasetId': !exists(json, 'dataset_id') ? undefined : json['dataset_id'],
        'running': !exists(json, 'running') ? undefined : json['running'],
        'createdAt': !exists(json, 'created_at') ? undefined : (new Date(json['created_at'])),
        'results': !exists(json, 'results') ? undefined : MatchJobBaseResultsFromJSON(json['results']),
        'createdBy': !exists(json, 'created_by') ? undefined : json['created_by'],
        'startedAt': !exists(json, 'started_at') ? undefined : (new Date(json['started_at'])),
        'finishedAt': !exists(json, 'finished_at') ? undefined : (new Date(json['finished_at'])),
        'phase': !exists(json, 'phase') ? undefined : json['phase'],
        'progress': !exists(json, 'progress') ? undefined : MatchJobProgressFromJSON(json['progress']),
    };
}

export function DedupJobAllToJSON(value?: DedupJobAll | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'id': value.id,
        'name': value.name,
        'dataset_id': value.datasetId,
        'running': value.running,
        'created_at': value.createdAt === undefined ? undefined : (value.createdAt.toISOString()),
        'results': MatchJobBaseResultsToJSON(value.results),
        'created_by': value.createdBy,
        'started_at': value.startedAt === undefined ? undefined : (value.startedAt.toISOString()),
        'finished_at': value.finishedAt === undefined ? undefined : (value.finishedAt.toISOString()),
        'phase': value.phase,
        'progress': MatchJobProgressToJSON(value.progress),
    };
}


