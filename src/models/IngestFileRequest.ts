/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface IngestFileRequest
 */
export interface IngestFileRequest {
    /**
     * Defines the type of file and thus also the type of data ingestion to perform. 
     * @type {string}
     * @memberof IngestFileRequest
     */
    fileType?: IngestFileRequestFileTypeEnum;
    /**
     * Value to use for any `meta_record_source` fields of ingested records. This could be the original filename or the name of the originating data source. 
     * @type {string}
     * @memberof IngestFileRequest
     */
    recordSource?: string;
}

export function IngestFileRequestFromJSON(json: any): IngestFileRequest {
    return IngestFileRequestFromJSONTyped(json, false);
}

export function IngestFileRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): IngestFileRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'fileType': !exists(json, 'file_type') ? undefined : json['file_type'],
        'recordSource': !exists(json, 'record_source') ? undefined : json['record_source'],
    };
}

export function IngestFileRequestToJSON(value?: IngestFileRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'file_type': value.fileType,
        'record_source': value.recordSource,
    };
}

/**
* @export
* @enum {string}
*/
export enum IngestFileRequestFileTypeEnum {
    RecordsCsv = 'records.csv',
    DocumentsZip = 'documents.zip'
}


