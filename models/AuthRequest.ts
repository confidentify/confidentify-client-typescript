/* tslint:disable */
/* eslint-disable */
/**
 * Confidentify API
 * Services that let you build confidence and identify matches in customer data. ## Features overview * Contact data processing services (tagged with `process`) which offer   validation and enrichment backed by inference and knowledge on complex   data types such as names, email addresses, phone numbers.  * Data matching and searching services (tagged with `matching`) that    allow you to identify duplicated data or matches against third party   contact data list.  * Dataset management services (tagged with `dataset`) that allow record storage and retrieval. ## Integrator notes: * Use the `/auth` endpoint to get an access token. Access tokens are temporary, so design the client the be capable of renewing it. * The APIs are rate-limited, so design the client to be capable of retrying with some delay upon HTTP 429 responses. 
 *
 * The version of the OpenAPI document: 1.0.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
/**
 * 
 * @export
 * @interface AuthRequest
 */
export interface AuthRequest {
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    username?: string;
    /**
     * 
     * @type {string}
     * @memberof AuthRequest
     */
    password?: string;
    /**
     * Optional integer specifying the number of seconds that the returned token should be valid for. 
     * @type {number}
     * @memberof AuthRequest
     */
    expireAfterSeconds?: number;
    /**
     * An optional array of service names to grant access to. Use this to generate access tokens with limited capabilities. 
     * @type {Array<string>}
     * @memberof AuthRequest
     */
    serviceGrants?: Array<string>;
}

export function AuthRequestFromJSON(json: any): AuthRequest {
    return AuthRequestFromJSONTyped(json, false);
}

export function AuthRequestFromJSONTyped(json: any, ignoreDiscriminator: boolean): AuthRequest {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'username': !exists(json, 'username') ? undefined : json['username'],
        'password': !exists(json, 'password') ? undefined : json['password'],
        'expireAfterSeconds': !exists(json, 'expire_after_seconds') ? undefined : json['expire_after_seconds'],
        'serviceGrants': !exists(json, 'service_grants') ? undefined : json['service_grants'],
    };
}

export function AuthRequestToJSON(value?: AuthRequest | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'username': value.username,
        'password': value.password,
        'expire_after_seconds': value.expireAfterSeconds,
        'service_grants': value.serviceGrants,
    };
}


